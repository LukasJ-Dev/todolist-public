# Production Dockerfile for Backend
FROM node:22-alpine AS backend-build

# Install pnpm and tsx
RUN npm install -g pnpm@10.15.0 tsx@4.19.2

# Set working directory
WORKDIR /app

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy all package.json files for better dependency resolution
COPY packages/ ./packages/
COPY apps/backend/package.json ./apps/backend/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build packages first (required for workspace dependencies)
# Ensure config package dependencies are installed and build locally
RUN cd packages/config && pnpm install && pnpm exec tsc
RUN cd packages/types && pnpm install && pnpm exec tsc

# Build the backend
RUN pnpm --filter @todolist/backend build

# Production stage
FROM node:22-alpine AS backend-production

# Install pnpm, TypeScript, tsx, @types/node, and curl for health checks
RUN npm install -g pnpm@10.15.0 typescript@5.7.2 tsx@4.19.2 @types/node@20.19.13 && apk add --no-cache curl

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy all package.json files for better dependency resolution
COPY packages/ ./packages/
COPY apps/backend/package.json ./apps/backend/

# Install only production dependencies (skip prepare script to avoid husky issues)
RUN pnpm install --frozen-lockfile --prod --ignore-scripts

# Copy built packages from build stage
COPY --from=backend-build --chown=nodejs:nodejs /app/packages/config/dist ./packages/config/dist
COPY --from=backend-build --chown=nodejs:nodejs /app/packages/types/dist ./packages/types/dist
COPY --from=backend-build --chown=nodejs:nodejs /app/packages/config/package.json ./packages/config/package.json
COPY --from=backend-build --chown=nodejs:nodejs /app/packages/types/package.json ./packages/types/package.json

# Copy built backend from build stage
COPY --from=backend-build --chown=nodejs:nodejs /app/apps/backend/dist ./apps/backend/dist

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["node", "apps/backend/dist/apps/backend/src/server.js"]
