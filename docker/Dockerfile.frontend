# Production Dockerfile for Frontend
FROM node:22-alpine AS frontend-build

# Install pnpm and tsx
RUN npm install -g pnpm@10.15.0 tsx@4.19.2

# Set working directory
WORKDIR /app

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy all package.json files for better dependency resolution
COPY packages/ ./packages/
COPY apps/frontend/package.json ./apps/frontend/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build packages first (required for workspace dependencies)
# Ensure config package dependencies are installed and build locally
RUN cd packages/config && pnpm install && pnpm exec tsc
RUN cd packages/types && pnpm install && pnpm exec tsc

# Build the frontend
RUN pnpm --filter @todolist/frontend build

# Production stage with nginx
FROM nginx:alpine AS frontend-production

# Copy custom nginx configuration
COPY apps/frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Copy built frontend from build stage
COPY --from=frontend-build /app/apps/frontend/dist /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1001 -S nginx && \
    adduser -S nginx -u 1001 -G nginx

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Switch to non-root user
USER nginx

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:80 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
